name: ECS Deployment

on:
  push:
    branches:
      - main
    # paths-ignore:
    # - '.github/workflows/*' #워크플로우가 수정되면 액션이 실행안됨

env:
  AWS_REGION: MY_AWS_REGION # set this to your preferred AWS region, e.g. us-west-1

  ECR_REPOSITORY: MY_ECR_REPOSITORY # set this to your Amazon ECR repository name

  ECS_SERVICE: MY_ECS_SERVICE # set this to your Amazon ECS service name
  ECS_CLUSTER: MY_ECS_CLUSTER # set this to your Amazon ECS cluster name

  ECS_TASK_DEFINITION:
    MY_ECS_TASK_DEFINITION # set this to the path to your Amazon ECS task definition
    # file, e.g. .aws/task-definition.json
  CONTAINER_NAME:
    MY_CONTAINER_NAME # set this to the name of the container in the
    # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  test:
    env:
      TEST_ENV: 테스트값이다
      LOCAL: ${{ secrets.LOCAL }}
    runs-on: ubuntu-latest
    steps:
      - name: env output
        run: |
          echo "Global env: $GLOBAL_ENV"
          echo "test env: ${{ env.TEST_ENV }}"
          echo "test env: $TEST_ENV"
          echo "local env: ${{ env.LOCAL }}"
          echo "local AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}"

      - name: Get Code
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: /home/runner/.local/share/pnpm/store/v3
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Install dependencies
        run: |
          pnpm install
          echo "PNPM cache path:"
          pnpm store path

      - name: Run tests
        id: test
        run: |
          pnpm test
        continue-on-error: true

      - name: Check test status
        if: failure() && steps.test.outcome == 'failure'
        run: |
          echo "Step conclusion: ${{ steps.test.conclusion }}"
          echo "Step outcome: ${{ steps.test.outcome }}"

      - name: Upload test logs on failure
        if: failure() && steps.test.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: test-logs #다운로드가능한 아티팩트 이름
          path: test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Get Code
        uses: actions/checkout@v4

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     aws-region: ${{ env.AWS_REGION }}

    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     # Build a docker container and
    #     # push it to ECR so that it can
    #     # be deployed to ECS.
    #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    #     echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
